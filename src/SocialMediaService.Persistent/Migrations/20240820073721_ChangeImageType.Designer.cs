// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialMediaService.Persistent.Data;

#nullable disable

namespace SocialMediaService.Persistent.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240820073721_ChangeImageType")]
    partial class ChangeImageType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HiddenPosts", b =>
                {
                    b.Property<string>("HiddenById")
                        .HasColumnType("text");

                    b.Property<string>("HiddenId")
                        .HasColumnType("text");

                    b.HasKey("HiddenById", "HiddenId");

                    b.HasIndex("HiddenId");

                    b.ToTable("HiddenPosts");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("CoverImage")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Image")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Visibility")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Invite", b =>
                {
                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SenderId", "ProfileId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.JoinRequest", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProfileId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("JoinRequests");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Kicked", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<string>("KickedById")
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<DateTime>("KickedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProfileId", "KickedById", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("KickedById");

                    b.ToTable("KickedList");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Member", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<DateTime>("JointAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("ProfileId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Visibility")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Reaction", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReactedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("PostId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Block", b =>
                {
                    b.Property<string>("BlockedId")
                        .HasColumnType("text");

                    b.Property<string>("BlockerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("BlockedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BlockedId", "BlockerId");

                    b.HasIndex("BlockerId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Follow", b =>
                {
                    b.Property<string>("FollowedId")
                        .HasColumnType("text");

                    b.Property<string>("FollowerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("FollowedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FollowedId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Friendship", b =>
                {
                    b.Property<string>("FriendId")
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FriendId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.FriendshipRequest", b =>
                {
                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SenderId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("FriendshipRequests");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("CoverImage")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("Image")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.SavedPost", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SavedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProfileId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Settings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<byte>("Bio")
                        .HasColumnType("smallint");

                    b.Property<byte>("Company")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("DateOfBirth")
                        .HasColumnType("smallint");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<byte>("JobTitle")
                        .HasColumnType("smallint");

                    b.Property<byte>("LastName")
                        .HasColumnType("smallint");

                    b.Property<byte>("Phone")
                        .HasColumnType("smallint");

                    b.Property<byte>("Socials")
                        .HasColumnType("smallint");

                    b.Property<byte>("StartDate")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SettingsList");
                });

            modelBuilder.Entity("HiddenPosts", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("HiddenById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Posts.Post", null)
                        .WithMany()
                        .HasForeignKey("HiddenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Group", b =>
                {
                    b.OwnsOne("SocialMediaService.Domain.Aggregates.Groups.ValueObjects.GroupSettings", "Settings", b1 =>
                        {
                            b1.Property<string>("GroupId")
                                .HasColumnType("text");

                            b1.HasKey("GroupId");

                            b1.ToTable("Groups");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Invite", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Groups.Group", "Group")
                        .WithMany("Invites")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("ReceivedInvites")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Sender")
                        .WithMany("SentInvites")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Profile");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.JoinRequest", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Groups.Group", "Group")
                        .WithMany("JoinRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("JoinRequests")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Kicked", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Groups.Group", "Group")
                        .WithMany("Kicked")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "KickedBy")
                        .WithMany("Kicked")
                        .HasForeignKey("KickedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("KickedFrom")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("KickedBy");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Member", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Groups.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("MemberOf")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Comment", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Posts.Comment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SocialMediaService.Domain.Aggregates.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Post", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Groups.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("Posts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SocialMediaService.Domain.Aggregates.Posts.ValueObjects.Media", "Media", b1 =>
                        {
                            b1.Property<string>("PostId")
                                .HasColumnType("text");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.Navigation("Group");

                    b.Navigation("Media");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Reaction", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Posts.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("Reactions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Block", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Blocked")
                        .WithMany("BlockedBy")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Blocker")
                        .WithMany("Blocked")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Follow", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Followed")
                        .WithMany("FollowedBy")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Friendship", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Friend")
                        .WithMany("FriendTo")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("Friends")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.FriendshipRequest", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Receiver")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Sender")
                        .WithMany("SentRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.OwnsOne("SocialMediaService.Domain.Aggregates.Profiles.ValueObjects.JobInformations", "JobInformations", b1 =>
                        {
                            b1.Property<string>("ProfileId")
                                .HasColumnType("text");

                            b1.Property<string>("Company")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("JobTitle")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("SocialMediaService.Domain.Aggregates.Profiles.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<string>("ProfileId")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("SocialMediaService.Domain.Aggregates.Profiles.ValueObjects.Socials", "Socials", b1 =>
                        {
                            b1.Property<string>("ProfileId")
                                .HasColumnType("text");

                            b1.Property<string>("Facebook")
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)");

                            b1.Property<string>("Twitter")
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)");

                            b1.Property<string>("Youtube")
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("JobInformations")
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("Socials")
                        .IsRequired();
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.SavedPost", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Posts.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithMany("SavedPosts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Settings", b =>
                {
                    b.HasOne("SocialMediaService.Domain.Aggregates.Profiles.Profile", "Profile")
                        .WithOne("Settings")
                        .HasForeignKey("SocialMediaService.Domain.Aggregates.Profiles.Settings", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Groups.Group", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("JoinRequests");

                    b.Navigation("Kicked");

                    b.Navigation("Members");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Posts.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialMediaService.Domain.Aggregates.Profiles.Profile", b =>
                {
                    b.Navigation("Blocked");

                    b.Navigation("BlockedBy");

                    b.Navigation("Comments");

                    b.Navigation("FollowedBy");

                    b.Navigation("Following");

                    b.Navigation("FriendTo");

                    b.Navigation("Friends");

                    b.Navigation("JoinRequests");

                    b.Navigation("Kicked");

                    b.Navigation("KickedFrom");

                    b.Navigation("MemberOf");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");

                    b.Navigation("ReceivedInvites");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SavedPosts");

                    b.Navigation("SentInvites");

                    b.Navigation("SentRequests");

                    b.Navigation("Settings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
